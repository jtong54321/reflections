What happens when you initialize a repository? Why do you need to do it?

	It creates a metadata file that is used by the git repository.  The file is called '.git'.  It is necessary for git to work properly.
	
How is the staging area different from the working directory and the repository? What value do you think it offers?

	It's a temporary holding area of which files will be tracked when a commit command is given.  It allows you to selectively choose files without using the whole directory or to track logical changes.
	
How can you use the staging area to make sure you have one commit per logical change?

	If you have several files modified, you can add just the one file you wish to commit to the staging area and then commit.  The staging area allows for control of how many files you want committed at a particular time.
	
What are some situations when branches would be helpful in keeping your history organized? How would branches help?

	When trying out new experimental features. It allows you to try the changes without worrying about reverting back to the original since it is tracked and easily done.
	
How do the diagrams help you visualize the branch structure?

	It helps me to understand the relationship between each commit and how the system functions.
	
What is the result of merging two branches together? Why do we represent it in the diagram the way we do?
	
	The code from both branches is combined into one branch.  To indicate that there were 2 different paths of changes involved.
	
What are the pros and cons of Git’s automatic merging vs. always doing merges manually?

	Pros: Less files to compare manually.  Faster
	
	Cons: Have to compare conflicts and resolve them.
	
Commands:

git init			Make an existing directory into a Git repository
git add <filename>		Add a file to the staging area
git commit			Commit the files from the staging area to the repository 
git status			Show which files are in the staging area, and which files from the working directory are not part of the repository    
git diff			Git diff without arguments is comparing the working directory with the staging area
git diff --staged		Compare the staging area with the repository
git diff <id1> <id2>		Compare differences between commit with id1 with id2
git reset <filename>		Remove filename from the staging area			
git reset --hard		Undo all changes! There is no rollback for this, so be carefull!
git checkout master		Restore the "Head" to the latest check-in (this will be part of a later lesson/module)
git log --graph --oneline <branch1> <branch2>	Show a visual representation of the commit history within different branches
git checkout -b <new_branch_name>	Creates a new branch and do a checkout on this branch in one call instead of git branch new_branch_name and git checkout new_branch_name
git merge <branch1> <branch2>		Merge two branches, branch2 gets merged into branch1
git merge --abort		Abort merging process and restore files to state before merge.
git branch			Show the existing branch labels		
git branch -d <name>		Remove the branch with the specified name
git show <commitId>		Show the changes made in this commit compared to the previous version. This is working even after merging.
git gc				Run Git garbage collection. This will remove unreachable commits. 
	